import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, ToggleButtons, FloatSlider

def get_angles(x, y, Y, L):
    dx1 = x
    dy1 = y
    dx2 = L - x
    dy2 = Y
    theta = np.arctan2(dy1, dx1)
    phi = np.arctan2(dy2, dx2)
    return np.degrees(theta), np.degrees(phi)

def travel_time_reflection(x_vals, y, L, c):
    d1 = np.sqrt(x_vals**2 + y**2)
    d2 = np.sqrt((L - x_vals)**2 + y**2)
    return (d1 + d2) / c

def travel_time_refraction(x_vals, y, Y, L, c1, c2):
    d1 = np.sqrt(x_vals**2 + y**2) / c1
    d2 = np.sqrt((L - x_vals)**2 + Y**2) / c2
    return d1 + d2

def plot_fermat(mode, y, Y, L, c1, c2):
    x_vals = np.linspace(0.01, L - 0.01, 1000)

    if mode == 'Reflection':
        times = travel_time_reflection(x_vals, y, L, c1)
    else:
        times = travel_time_refraction(x_vals, y, Y, L, c1, c2)

    min_index = np.argmin(times)
    x_min = x_vals[min_index]
    t_min = times[min_index]

    # Plotting
    plt.figure(figsize=(14, 6))

    # Time vs x
    plt.subplot(1, 2, 1)
    plt.plot(x_vals, times, label='Travel Time')
    plt.plot(x_min, t_min, 'ro', label='Minimum Time')
    plt.axvline(x=x_min, color='r', linestyle='--', label=f'x = {x_min:.2f}')
    plt.xlabel('x (Position of S)')
    plt.ylabel('Total Travel Time')
    plt.title(f'{mode}: Fermat‚Äôs Principle')
    plt.grid(True)
    plt.legend()

    # Ray Path
    plt.subplot(1, 2, 2)
    if mode == 'Reflection':
        A = (0, y)
        B = (L, y)
        S = (x_min, 0)
        plt.title('Ray Path ‚Äî Reflection')
        plt.plot([A[0], S[0], B[0]], [A[1], S[1], B[1]], 'b-o')
        plt.axhline(0, color='gray', linestyle='--')
        theta, phi = get_angles(x_min, y, y, L)
        angle_eq = f"Œ∏ = {theta:.2f}¬∞, œÜ = {phi:.2f}¬∞ ‚Üí Œ∏ = œÜ ‚úÖ"
    else:
        A = (0, y)
        B = (L, -Y)
        S = (x_min, 0)
        plt.title('Ray Path ‚Äî Refraction')
        plt.plot([A[0], S[0], B[0]], [A[1], S[1], B[1]], 'b-o')
        plt.axhline(0, color='gray', linestyle='--')
        theta, phi = get_angles(x_min, y, Y, L)
        snell_LHS = np.sin(np.radians(theta)) / c1
        snell_RHS = np.sin(np.radians(phi)) / c2
        angle_eq = f"sinŒ∏/c‚ÇÅ ‚âà {snell_LHS:.3f}, sinœÜ/c‚ÇÇ ‚âà {snell_RHS:.3f} ‚Üí Snell‚Äôs Law ‚úÖ"

    plt.xlabel('x')
    plt.ylabel('y')
    plt.grid(True)
    plt.xlim(-1, L + 1)
    plt.ylim(-Y - 1, y + 1)
    plt.axvline(x_min, color='red', linestyle='--', alpha=0.3)

    plt.tight_layout()
    plt.show()

    # Output law verification
    print(f"\nüîç {mode} angles at minimum-time point S(x = {x_min:.2f}):")
    print(angle_eq)

# Interactive UI
interact(
    plot_fermat,
    mode=ToggleButtons(options=['Reflection', 'Refraction'], description='Scenario:'),
    y=FloatSlider(value=4, min=1, max=10, step=0.5, description='Height A (y)'),
    Y=FloatSlider(value=4, min=1, max=10, step=0.5, description='Depth B (Y)'),
    L=FloatSlider(value=8, min=2, max=20, step=1, description='Horizontal Dist (L)'),
    c1=FloatSlider(value=1.0, min=0.1, max=3.0, step=0.1, description='Speed c‚ÇÅ'),
    c2=FloatSlider(value=2.0, min=0.1, max=3.0, step=0.1, description='Speed c‚ÇÇ'),
);
